@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {
    & {
        @each $property in $properties {
            #{$property}: $min-value;
        }

        @media screen and (min-width: $min-screen) {
            @each $property in $properties {
                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);
            }
        }

        @media screen and (min-width: $max-screen) {
            @each $property in $properties {
                #{$property}: $max-value;
            }
        }
    }
}


///////////////////////////////////////////

@mixin responsive-property($property, $fromValue, $toValue, $fromBp: $tablet, $toBp: $widescreen) {

    $fromValues: ();
    $betweenValues: ();
    $toValues: ();

    @for $i from 1 through length($fromValue) {
        $fv: nth($fromValue, $i);
        $tv: nth($toValue, $i);

        $bv: $fv;
        $bvf: false;
        $bvt: false;

        @if (type-of($fv)=="number"and not unitless($fv) and unit($fv) !="%") {
            $fv: if(unit($fv) !="px", ($fv / ($fv * 0 + 1) * 16) * 1px, $fv);
            $bvf: $fv;
        }

        @if (type-of($tv)=="number"and not unitless($tv) and unit($tv) !="%") {
            $tv: if(unit($tv) !="px", ($tv / ($tv * 0 + 1) * 16) * 1px, $tv);
            $bvt: $tv;
        }

        @if ($bvf !=false and $bvt !=false) {
            $bv: between($bvf, $bvt, $fromBp, $toBp);
        }

        $fromValues: append($fromValues, $fv);
        $betweenValues: append($betweenValues, $bv);
        $toValues: append($toValues, $tv);
    }

    #{$property}: $fromValues;

    @media screen and (min-width: #{$fromBp}) {
        #{$property}: $betweenValues;
    }

    @media screen and (min-width: #{$toBp}) {
        #{$property}: $toValues;
    }
}